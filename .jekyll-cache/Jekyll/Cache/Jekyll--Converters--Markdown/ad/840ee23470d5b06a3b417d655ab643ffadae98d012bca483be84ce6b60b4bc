I"49<p>在很多时候，我们需要在类的内部初始化一个静态的Map或者List，然后保存一下常量值提供给类内部方法使用。  <br />
我们通常的做法是：<br />
<!-- more --><br />
首先初始化一个Map的静态变量，然后在静态块添加常量值：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="no">CONSTANT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;();</span>
<span class="kd">static</span> <span class="o">{</span>
	<span class="no">CONSTANT</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"one"</span><span class="o">);</span>
	<span class="no">CONSTANT</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"2"</span><span class="o">,</span> <span class="s">"two"</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<h4 id="一你也许会陌生的匿名内部类写法">一、你也许会陌生的匿名内部类写法</h4>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="no">CONSTANT</span> <span class="o">=</span>
     <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
	<span class="o">{</span>
		<span class="n">put</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"one"</span><span class="o">);</span>
		<span class="n">put</span><span class="o">(</span><span class="s">"2"</span><span class="o">,</span> <span class="s">"two"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">};</span></code></pre></figure>

<h4 id="二先看看我们熟悉的写法">二、先看看我们熟悉的写法</h4>

<p>如果对于这种方式比较陌生，那先看两个熟悉的</p>

<ul>
  <li>熟悉1</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="nc">Thread</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread running!"</span><span class="o">);</span>
    <span class="o">};</span>
<span class="o">}.</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

<p>上面这段代码的意思就是，声明一个Thread的子类并重写Thread的run()方法，
然后创建一个该子类的实例然后调用其start()方法。  <br />
由于声明的该Thread的子类没有名字，所以叫匿名类。  <br />
又由于没有名字的类只能存在于一个类或者一个方法内部，所以又称为匿名内部类。</p>

<ul>
  <li>熟悉2</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread running!"</span><span class="o">);</span>
    <span class="o">};</span>
<span class="o">};</span>
<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></code></pre></figure>

<p>唯一的区别就是不是直接创建子类并调用其方法，而是声明一个该子类的父类引用thread，然后通过该父类引用调用子类方法。  <br />
创建完匿名类的实例后，没有立即执行start()，创建实例和执行实例的方法分开。</p>

<p>两者的区别相当于：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//1</span>
<span class="k">new</span> <span class="nf">User</span><span class="o">().</span><span class="na">setName</span><span class="o">(</span><span class="s">"Boyce Zhang"</span><span class="o">);</span>
<span class="c1">//2</span>
<span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
<span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Boyce Zhang"</span><span class="o">);</span></code></pre></figure>

<h4 id="三那个陌生的写法究竟是个什么鬼">三、那个陌生的写法究竟是个什么鬼？</h4>

<p>我们将熟悉的写法稍加改变</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="nc">Thread</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread running!"</span><span class="o">);</span>
    <span class="o">};</span>
    <span class="o">{</span>
        <span class="n">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">};</span></code></pre></figure>

<p><b>实际上这种写法就是在匿名子类的类局部代码块中调用其类方法。</b><br />
<b>局部代码块内的语句是在创建该类的实例后由类加载器隐式立即执行的。</b></p>

<p>相当于：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
    <span class="o">{</span>
        <span class="n">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Thread running!"</span><span class="o">);</span>
    <span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<p>所以三种方式在执行的时刻上略微的差别之外，效果并没有太大的区别。</p>

<p>这样一来，前面初始化Map的方式就不难理解了:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="no">CONSTANT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="o">{</span>
        <span class="n">put</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"one"</span><span class="o">);</span>
        <span class="n">put</span><span class="o">(</span><span class="s">"2"</span><span class="o">,</span> <span class="s">"two"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span></code></pre></figure>

<p>原理就是：  <br />
声明并实例化一个HashMap的子类（子类没有重写父类HashMap的任何方法），并且在子类的类局部代码块调用父类HashMap的put()方法。  <br />
最后声明一个Map接口引用CONSTANT指向实例化的HashMap子类的实例。  <br />
根据前面的例子我们知道，类局部代码块中的put()方法调用将在HashMap的匿名子类被实例化后由类加载器隐式的执行。</p>

<h4 id="四举一反三">四、举一反三</h4>

<p>其实,对于Java的任何类或接口，都可以声明一个匿名类继承或实现它。如：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">//重写父类方法，局部代码块调用自己重写过的父类方法。</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="nc">String</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cannot add anything!"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//代码块的顺序在前后都无所谓，可以出现在类范围的任何位置。</span>
    <span class="o">{</span>
        <span class="n">add</span><span class="o">(</span><span class="s">"Boyce Zhang"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="c1">//局部代码块调用父类方法。</span>
<span class="n">dao</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">User</span><span class="o">(){</span>
    <span class="o">{</span>
        <span class="n">setName</span><span class="o">(</span><span class="s">"Boyce Zhang"</span><span class="o">);</span>
        <span class="n">setAge</span><span class="o">(</span><span class="mi">26</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">});</span>

<span class="c1">//重写父类方法</span>
<span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">threadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">initialValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"Boyce Zhang"</span><span class="o">,</span> <span class="mi">26</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span></code></pre></figure>

<p><b>在匿名类的内部我们不但可以实现或重写其父类的方法。  <br />
而且也可以在其类的局部代码块中执行自己的方法或者其父类的方法。  <br />
这并不是匿名内部类的特殊语法，而是Java的语法，对于任何类都适用。</b></p>

<h4 id="五这种写法的优缺点分析">五、这种写法的优缺点分析</h4>

<p>这种写法常常就是用在实例化一个类后立即执行某些方法做一些类实例的数据初始化什么的。  <br />
其作用和先实例化一个类，在使用其引用调用需要立即调用的方法是一样的，如：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;();</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"one"</span><span class="o">);</span>
<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"2"</span><span class="o">,</span> <span class="s">"two"</span><span class="o">);</span></code></pre></figure>

<p>这种语法的优点就是简单，实例化一个类后立即做一些事情，比较方便。  <br />
效果有一点儿像Javascript里的即时函数一样。但是有本质的区别。  <br />
因为Javascript没有类的概念，或者说Javascript中function就是类，类就是function，  <br />
所以即时函数是加载完后执行整个function。而Java的局部代码块是可以选择执行类的任何方法。</p>

<p>当然这种写法也有其缺点：  <br />
每一个内部类的实例都会隐性的持有一个指向外部类的引用（静态内部类除外），  <br />
这样一方面是多余的引用浪费，另一方面当串行化这个子类实例时外部类也会被不知不觉的串行化，
如果外部类没有实现serialize接口时，就会报错。</p>
:ET